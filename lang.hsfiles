{-# START_FILE stack.yaml #-}
packages:
- .

resolver: lts-19.0

extra-deps:

{-# START_FILE .vscode/settings.json #-}
{
  "files.exclude": {
    "**/*.hi": true,
    "**/*.o": true,
    "**/*.x": true,
    "**/*.info": true,
    "**/*.y": true,
    "**/.stack-work": true,
    "**/*.bak": true
  }
}

{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0.0

dependencies:
- base >= 4.7 && < 5
- text
- array
- containers

ghc-options:
  - -Wall
  - -Wcompat
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wincomplete-record-updates
  - -Widentities

# from https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/
default-extensions:
  # trivial
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - MultiParamTypeClasses
  # only activated once used
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - TupleSections
  # no cost deriving power
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - GeneralizedNewtypeDeriving
  - StandaloneDeriving
  # used everywhere anyway
  - OverloadedStrings
  # ehh syntax
  - TypeApplications

library:
  source-dirs:
  - language/gen-{{lang}}

executables:
  {{name}}.exe:
    main: Main.hs
    source-dirs:
    - src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

{-# START_FILE brittany.yaml #-}
conf_forward:
  options_ghc:
    # trivial
    - -XEmptyCase
    - -XFlexibleContexts
    - -XFlexibleInstances
    - -XInstanceSigs
    - -XMultiParamTypeClasses
    # only activated once used
    - -XLambdaCase
    - -XMultiWayIf
    - -XNamedFieldPuns
    - -XTupleSections
    # no cost deriving power
    - -XDeriveFoldable
    - -XDeriveFunctor
    - -XDeriveGeneric
    - -XDeriveLift
    - -XDeriveTraversable
    - -XDerivingStrategies
    - -XGeneralizedNewtypeDeriving
    - -XStandaloneDeriving
    # used everywhere anyway
    - -XOverloadedStrings
    # ehh syntax
    - -XTypeApplications

{-# START_FILE .hlint.yaml #-}
# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
- ignore: {name: Use camelCase}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml

{-# START_FILE .stylish-haskell.yaml #-}
# stylish-haskell configuration file
# ==================================

# The stylish-haskell tool is mainly configured by specifying steps. These steps
# are a list, so they have an order, and one specific step may appear more than
# once (if needed). Each file is processed by these steps in the given order.
steps:
  # Convert some ASCII sequences to their Unicode equivalents. This is disabled
  # by default.
  # - unicode_syntax:
  #     # In order to make this work, we also need to insert the UnicodeSyntax
  #     # language pragma. If this flag is set to true, we insert it when it's
  #     # not already present. You may want to disable it if you configure
  #     # language extensions using some other method than pragmas. Default:
  #     # true.
  #     add_language_pragma: true

  # Align the right hand side of some elements.  This is quite conservative
  # and only applies to statements where each element occupies a single
  # line.
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true

  # Import cleanup
  - imports:
      # There are different ways we can align names and lists.
      #
      # - global: Align the import names and import list throughout the entire
      #   file.
      #
      # - file: Like global, but don't add padding when there are no qualified
      #   imports in the file.
      #
      # - group: Only align the imports per group (a group is formed by adjacent
      #   import lines).
      #
      # - none: Do not perform any alignment.
      #
      # Default: global.
      align: global

      # The following options affect only import list alignment.
      #
      # List align has following options:
      #
      # - after_alias: Import list is aligned with end of import including
      #   'as' and 'hiding' keywords.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                          init, last, length)
      #
      # - with_alias: Import list is aligned with start of alias or hiding.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                 init, last, length)
      #
      # - new_line: Import list starts always on new line.
      #
      #   > import qualified Data.List      as List
      #   >     (concat, foldl, foldr, head, init, last, length)
      #
      # Default: after_alias
      list_align: after_alias

      # Right-pad the module names to align imports in a group:
      #
      # - true: a little more readable
      #
      #   > import qualified Data.List       as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # - false: diff-safe
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, init,
      #   >                                     last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # Default: true
      pad_module_names: true

      # Long list align style takes effect when import is too long. This is
      # determined by 'columns' setting.
      #
      # - inline: This option will put as much specs on same line as possible.
      #
      # - new_line: Import list will start on new line.
      #
      # - new_line_multiline: Import list will start on new line when it's
      #   short enough to fit to single line. Otherwise it'll be multiline.
      #
      # - multiline: One line per import list entry.
      #   Type with constructor list acts like single import.
      #
      #   > import qualified Data.Map as M
      #   >     ( empty
      #   >     , singleton
      #   >     , ...
      #   >     , delete
      #   >     )
      #
      # Default: inline
      long_list_align: inline

      # Align empty list (importing instances)
      #
      # Empty list align has following options
      #
      # - inherit: inherit list_align setting
      #
      # - right_after: () is right after the module name:
      #
      #   > import Vector.Instances ()
      #
      # Default: inherit
      empty_list_align: inherit

      # List padding determines indentation of import list on lines after import.
      # This option affects 'long_list_align'.
      #
      # - <integer>: constant value
      #
      # - module_name: align under start of module name.
      #   Useful for 'file' and 'group' align settings.
      list_padding: 4

      # Separate lists option affects formatting of import list for type
      # or class. The only difference is single space between type and list
      # of constructors, selectors and class functions.
      #
      # - true: There is single space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable (fold, foldl, foldMap))
      #
      # - false: There is no space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable(fold, foldl, foldMap))
      #
      # Default: true
      separate_lists: true

      # Space surround option affects formatting of import lists on a single
      # line. The only difference is single space after the initial
      # parenthesis and a single space before the terminal parenthesis.
      #
      # - true: There is single space associated with the enclosing
      #   parenthesis.
      #
      #   > import Data.Foo ( foo )
      #
      # - false: There is no space associated with the enclosing parenthesis
      #
      #   > import Data.Foo (foo)
      #
      # Default: false
      space_surround: false

  # Language pragmas
  - language_pragmas:
      # We can generate different styles of language pragma lists.
      #
      # - vertical: Vertical-spaced language pragmas, one per line.
      #
      # - compact: A more compact style.
      #
      # - compact_line: Similar to compact, but wrap each line with
      #   `{-#LANGUAGE #-}'.
      #
      # Default: vertical.
      style: vertical

      # Align affects alignment of closing pragma brackets.
      #
      # - true: Brackets are aligned in same column.
      #
      # - false: Brackets are not aligned together. There is only one space
      #   between actual import and closing bracket.
      #
      # Default: true
      align: true

      # stylish-haskell can detect redundancy of some language pragmas. If this
      # is set to true, it will remove those redundant pragmas. Default: true.
      remove_redundant: true

  # Replace tabs by spaces. This is disabled by default.
  # - tabs:
  #     # Number of spaces to use for each tab. Default: 8, as specified by the
  #     # Haskell report.
  #     spaces: 8

  # Remove trailing whitespace
  - trailing_whitespace: {}

  # Squash multiple spaces between the left and right hand sides of some
  # elements into single spaces. Basically, this undoes the effect of
  # simple_align but is a bit less conservative.
  # - squash: {}

# A common setting is the number of columns (parts of) code will be wrapped
# to. Different steps take this into account. Default: 80.
columns: 80

# By default, line endings are converted according to the OS. You can override
# preferred format here.
#
# - native: Native newline format. CRLF on Windows, LF on other OSes.
#
# - lf: Convert to LF ("\n").
#
# - crlf: Convert to CRLF ("\r\n").
#
# Default: native.
newline: native

# Sometimes, language extensions are specified in a cabal file or from the
# command line instead of using language pragmas in the file. stylish-haskell
# needs to be aware of these, so it can parse the file correctly.
#
# No language extensions are enabled by default.
# language_extensions:
  # - TemplateHaskell
  # - QuasiQuotes
language_extensions:
  # trivial
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - MultiParamTypeClasses
  # only activated once used
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - TupleSections
  # no cost deriving power
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - GeneralizedNewtypeDeriving
  - StandaloneDeriving
  # used everywhere anyway
  - OverloadedStrings
  # ehh syntax
  - TypeApplications

{-# START_FILE .gitignore #-}
.stack-work/
network-uri-lenses.cabal
.ghc.environment*
dist*
.#*
result
TAGS

*.hi
*.o

{-# START_FILE .ghci #-}
:set -i./src:./test
:set -fobject-code
:set -O0
:set -j4
:set +s
:set -Wall
:set -Wincomplete-uni-patterns
:set -Wincomplete-record-updates
:set -Widentities
:set -Wredundant-constraints
:set -Wcpp-undef
:set -Werror=incomplete-patterns

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE language/{{lang}}.cf #-}
-- untyped
-- small untyped functional language
Prog.     Program   ::= [Def] Main                      ;

DMain.    Main      ::= "main" "=" "print" Exp3 ";"     ;
DDef.     Def       ::= Ident [Ident] "=" Exp           ;

terminator Def ";"                                      ;

terminator Ident ""                                     ;

EVar.     Exp3      ::= Ident                           ;
EInt.     Exp3      ::= Integer                         ;
EApp.     Exp2      ::= Exp2 Exp3                       ;
EAdd.     Exp1      ::= Exp1 "+" Exp2                   ;
ESub.     Exp1      ::= Exp1 "-" Exp2                   ;
Elt.      Exp1      ::= Exp1 "<" Exp2                   ;
EIf.      Exp       ::= "if" Exp "then" Exp "else" Exp  ;
EAbs.     Exp       ::= "\\" Ident "->" Exp             ;

coercions Exp 3                                         ;

comment "--"                                            ;
comment "{-" "-}"                                       ;

{-# START_FILE sample/sample1.lc #-}
x         = \ x -> 600 ;  -- pointless but syntactically correct
id x      = x ;
twice f x = f (f x) ;
fst x y   = x ;
fst1      = (\ x -> \ y -> x) ;
snd x     = \ x -> x ;
snd2      = \ x -> \ x -> x ;
main      = print (twice (\ x -> x) 7) ; -- result 7
-- main   = print (fst (twice (\x -> x)) 6 7) ; -- result 7

-- Example where dynamic binding gives different result:
-- n = 5
-- f = \ m -> n + m
-- g = \ n -> f n
-- main = print (g 0)
--   - static  binding of n: 5 + 0 = 5
--   - dynamic binding of n: 0 + 0 = 0

{-# START_FILE build{{lang}}.sh #-}
#!/usr/bin/env bash
if ! command -v bnfc &> /dev/null
then
    echo -e "\nBNFC is not installed. See the readme at https://github.com/efvincent/stack-templates\n"
    exit
fi

cd ./language/
echo -e "\n********\nRunning BNF Grammar Generator\n********\n"
bnfc -m --haskell -d -o gen-{{lang}} {{lang}}.cf
# skip the pygments command - creates a directory that only differs by
# case from the main language directory. TODO - fix it or delete it
# bnfc -m --pygments -o gen-{{lang}} {{lang}}.cf
echo -e "\n********\nRunning make over generated Grammar\n********\n"
cd ./gen-{{lang}}
make
echo -e "\n********\nFixup Test.hs\n********"
cd ./{{lang}}
sed -i 's/module Main where/module {{lang}}.Test (test) where/' Test.hs
sed -i 's/main ::/test ::/' Test.hs
sed -i 's/main = do/test = do/' Test.hs
cd ../..
echo -e "build with stack\n********\n"
stack build
echo -e "Done...\n********\n"

{-# START_FILE README.md #-}
# Programming Language Project Un

This project generated by a template with the purpose of working with a parser / lexer for a grammer (presumably for a programming language).

# Instructions

## Modifying the grammar

Within the `language` directory, there'll be a file called `gen-{{name}}`. Within there you'll find `{{name}}.cf` which is the parser / lexer file for BNFC.

## Generating the parser & Lexer code

The shell script `build{{name}}.sh` will generate the language by running `bnfc`, fixing up the sample test executable, and building the project for the first time.

You need to make the shell script executable first, then execute it.

```bash
$ # from the project home directory
$ chmod +x build{{name}}.sh
$ ./build{{name}}.sh
```

## Basic test
At the time this template was generated, the `bnfc` file specifies an early version of the untyped λ-Calculus from _Types and Programming Languages_ (Pierce). The executable will be `./language/gen-{{name}}/lang\Test`. On running it, there is no prompt, you can use the sample file located in `./sample/sample1.lc`

{-# START_FILE src/Main.hs #-}
module Main where

import {{lang}}.Test

main :: IO ()
main = test

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2022{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
