{-# START_FILE hie.yaml #-}
cradle:
  stack:

{-# START_FILE stack.yaml #-}
resolver:
  url: https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/lts/18/23.yaml

packages:
- .

extra-deps:

{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0.0

dependencies:
- base >= 4.7 && < 5
- text
- aeson
- containers
- unordered-containers
- mtl
- transformers
- monad-control

ghc-options:
  - -Wall
  - -Wcompat
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wincomplete-record-updates
  - -Widentities

executables:
  {{name}}.exe:
    main: Main.hs
    source-dirs:
    - src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    default-extensions:
    - DeriveGeneric
    - DeriveAnyClass
    - DisambiguateRecordFields
    - OverloadedStrings

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE README.md #-}
# Project {{name}}

Project description here. This is most likely a project for playing with some idea or learning something. If it's more of a project than that, this file should be edited to have a proper description. Note that much of this template and information in the initial readme comes from Alexis King's excellent blog post [An opinionated guild to Haskell in 2018](https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/), which may have some bits that are out of date, but still works for me and is chock full of useful information.

Happy hacking!

## Stack

I use stack rather than cabal or something more industrial strength like nix. This is because I'm still a casual Haskeller, using Haskell to experiment and learn, and because it's the most fun language that I've ever used.

Some tips for using `stack`

### Fast builds

You can skip GHC optimization with

```bash
$ stack build --fast
```

If you're running tests (I'm still bad at this), then know that running test implies a build, so you can add the fast flag. The following two are equivilant.

```bash
$ stack build --fast --test
$ stack test --fast
```

### Documentation

It is useful to build documentation as well as code. You can do this with the haddock flag. Note that this can take a long time to run. Open option is to only build docs for dependencies, which prevents having to re-run haddock every time you build.

```bash
$ stack test --fast --haddock-deps
```

### Watching for Changes

You can either use `ghcid`, or run a more robust build that's watching for changes with

```bash
$ stack test --fast --haddock-deps --file-watch
```

{-# START_FILE src/Main.hs #-}
module Main where

main :: IO ()
main = do
  putStrLn "Default implementation of project {{name}}."

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2022{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
