{-# START_FILE stack.yaml #-}
resolver: lts-19.0
system-ghc: true
packages:
- .

extra-deps:

{-# START_FILE hie.yaml #-}
cradle:
  stack:

{-# START_FILE .vscode/settings.json #-}
{
  "files.exclude": {
    "**/*.hi": true,
    "**/*.o": true,
    "**/*.x": true,
    "**/*.info": true,
    "**/*.y": true,
    "**/.stack-work": true,
    "**/*.bak": true
  }
}

{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0.0

dependencies:
  - base >= 4.7 && < 5
  - text
  - array
  - containers
  - unordered-containers
  - prettyprinter
  - mtl
  - transformers
  - monad-control
  - megaparsec
  - parser-combinators

ghc-options:
  - -Wall
  - -Wcompat
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wincomplete-record-updates
  - -Widentities

# from https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/
default-extensions:
  # trivial
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - MultiParamTypeClasses
  # only activated once used
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - TupleSections
  # no cost deriving power
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - GeneralizedNewtypeDeriving
  - StandaloneDeriving
  # used everywhere anyway
  - OverloadedStrings
  # ehh syntax
  - TypeApplications

executables:
  {{name}}.exe:
    main: Main.hs
    source-dirs:
    - src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N

{-# START_FILE src/Main.hs #-}
module Main where

main :: IO ()
main = putStrLn "Default implementation of project {{name}}"

{-# START_FILE src/Lang/Parser.hs #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# OPTIONS_GHC -Wno-unused-do-bind #-}
{-# HLINT ignore "Use <$>" #-}

module Lang.Parser where

import Data.Functor.Identity (Identity)
import Data.Text (Text, pack, unpack)
import Data.Void (Void)
import Lang.Syntax (Term(..), Typ(..))
import Text.Megaparsec
  ( (<?>)
  , ParsecT
  , between
  , choice
  , many
  , parseTest
  )
import Text.Megaparsec.Char (alphaNumChar, char, letterChar, space1)
import qualified Text.Megaparsec.Char.Lexer as L
import qualified Text.Megaparsec.Debug as D

type Parser = ParsecT Void Text Identity

-- | set to true to debug things
debug :: Bool
debug = False

-- | dbg that can be disabled
dbg :: Show a => Text -> Parser a -> Parser a
dbg s = if debug then D.dbg (unpack s) else id

-- | ws is a whitespace consuming parser
ws :: Parser ()
ws =
  L.space space1 (L.skipLineComment "--") (L.skipBlockCommentNested "{-" "-}")

-- | lexeme extends a parser to consume whitespace
lexeme :: Parser a -> Parser a
lexeme = L.lexeme ws

-- | symbol creates a parser that parses the passed 
-- string argument and following whitespace
symbol :: Text -> Parser Text
symbol s = do
  L.symbol ws s

-- | schar is char parser that consumes space
schar :: Char -> Parser Char
schar c = do
  c' <- char c
  ws
  pure c'

-- | parens extens a parser to do it's parsing within
-- parenthesis
parens :: Parser a -> Parser a
parens = between (symbol "(") (symbol ")")

{-
Now the actual parsing...
-}

-- | keywords or reserved words will be rejected as identifiers
keywords :: [Text]
keywords = ["if", "then", "else"]

-- | parses an identifier
ident :: Parser Text
ident = lexeme (ident' >>= (check . pack))
 where
  ident' = (:) <$> letterChar <*> many alphaNumChar
  check name
    | name `elem` keywords = fail $ "keyword " <> unpack name <> " is reserved"
    | otherwise            = pure name

-- | var parses variables which are identifiers as lexemes
var :: Parser Term
var = Var <$> lexeme ident

-- | lambda parses a lambda term which may be indicated by 
-- an either forwards or backwards slash for ease of testing
-- in the REPL
lambda :: Parser Term
lambda = do
  choice [schar '\\', schar '/']
  p <- ident
  schar ':' <?> "type annotation starting with ':'"
  ty <- typ
  schar '.'
  t <- term
  pure $ Lambda p ty t

-- | ifte parses an if then else term. It parses the the terms
-- (predicate, true clause, and false clause) with @termStart@
-- meaning that terms completed using @termEnd@ like application 
-- need to be wrapped in parenthesis
ifte :: Parser Term
ifte = do
  symbol "if"
  predicate <- termStart
  symbol "then"
  tclause <- termStart
  symbol "else"
  fclause <- termStart
  pure $ IfThen predicate tclause fclause

-- | term consists of a termStart and optionally another full term
-- following the term start. If the optional second term exists, then
-- what we have is the application of one term to another
term :: Parser Term
term = do
  e1  <- termStart
  mE2 <- termEnd
  case mE2 of
    Nothing -> pure e1
    Just e2 -> pure $ Application e1 e2

-- | termStart is one of the following: A full term wrapped in parens,
-- one of the literals (true, false, zero), an if-then-else statement,
-- a lambda, or a variable
termStart :: Parser Term
termStart =
  choice
      [ parens term <?> "parenthesized term"
      , LitTrue <$ symbol "true"
      , LitFalse <$ symbol "false"
      , LitZero <$ symbol "0"
      , ifte
      , lambda
      , var
      ]
    <?> "start of a term"

-- | termEnd parses either a full @Term@ or @Nothing@. It's used after a 
-- @termStart@ to see if the @termStart@ is a stand-alone @Term@, or a 
-- @Term@ being applied to a second @Term@
termEnd :: Parser (Maybe Term)
termEnd = choice [end, pure Nothing]
 where
  end :: Parser (Maybe Term)
  end = do
    t <- term
    pure $ Just t

-- | typ parses a type, which consists of  
typ :: Parser Typ
typ = do
  t1  <- typStart
  mT2 <- typEnd
  case mT2 of
    Nothing -> pure t1
    Just t2 -> pure $ Fn t1 t2

typStart :: Parser Typ
typStart =
  choice [parens typ <?> "parenthesized type", Boolean <$ symbol "Bool"]
    <?> "a type"

typEnd :: Parser (Maybe Typ)
typEnd = do
  choice [end, pure Nothing] <?> "function return"
 where
  end :: Parser (Maybe Typ)
  end = do
    symbol "->"
    t <- typ
    pure $ Just t

{-# START_FILE src/Lang/Environment.hs #-}
module Lang.Environment where

{-# START_FILE src/Lang/Syntax.hs #-}
module Lang.Syntax where

import Data.Text (Text)

-- | A term in this simple lambda calculus starting point 
data Term
  = Var Text
  | Lambda Text Typ Term
  | LitTrue
  | LitFalse
  | LitZero
  | IfThen Term Term Term
  | Application Term Term
  deriving (Show, Eq)

-- | A type in this simple lambda calculus starting point
data Typ 
  = Boolean       -- ^ Represents boolean data type
  | Fn Typ Typ    -- ^ Represents the arrow or function type
  deriving (Show, Eq)

{-

Grammar, corrected for left recursion

PTERM = "(", TERM, ")"

LAMBDA = "/", identifier, TERM

IDENT = alpha, alphaNum*

IFTE = "if", TERM-START, "then", TERM-START, "else" TERM-START     

TERM = TERM-START, [TERM-END]     -- start is required, end is optional 

TERM-START
  = PTERM
  | LAMBDA
  | IFTE
  | IDENT

TERM-END
  = TERM            -- term coming after another term is an application
  | NOTHING         -- basically, not an application

TYP
  = [TYP-START]
  | NOTHING

PTYP = "(", TYP, ")"

TYP-START
  = PTYP
  | BOOL

TYP-END
  = TYP
  | NOTHING

-}

{-# START_FILE makefile #-}
OPTIMIZATION=-O0
build:
	cabal new-build all -j --ghc-options $(OPTIMIZATION)

haddock:
	cabal new-haddock all

haddock-hackage:
	cabal new-haddock all --haddock-for-hackage --haddock-option=--hyperlinked-source
	echo "the hackage ui doesn't accept the default format, use command instead"
	cabal upload -d --publish ./dist-newstyle/*-docs.tar.gz

hpack:
	nix-shell ./nix/hpack-shell.nix --run "make update-cabal"

ghcid: clean hpack
	ghcid \
		--test="main" \
		--command="ghci" \
		test/Spec
ghcid-app: clean hpack
	ghcid \
		--main="main" \
		--command="ghci" \
		app/exe

ghci:
	ghci app/exe

etags:
	hasktags  -e ./src

update-cabal: etags
	hpack --force ./

clean:
	rm -fR dist dist-*

.PHONY: test

sdist: hpack
	nix-build . # ad-hoc proof it builds
	cabal sdist

run:
	cabal new-run exe --ghc-options $(OPTIMIZATION) -- \

brittany_:
	$(shell set -x; for i in `fd hs`; do hlint --refactor --refactor-options=-i $$i; brittany --write-mode=inplace $$i; done)

brittany:
	nix-shell ./nix/travis-shell.nix --run "make brittany_"

bundle:
	rm -f result
	nix-build nix/bundle.nix
	mv result template

{-# START_FILE .gitignore #-}
.stack-work/
network-uri-lenses.cabal
.ghc.environment*
dist*
.#*
result
TAGS

*.hi
*.o

{-# START_FILE .ghci #-}
:set -i./src:./test
:set -fobject-code
:set -O0
:set -j4
:set +s
:set -w

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE README.md #-}
# Megaparsec project {{name}}

## Stack

I use stack rather than cabal or something more industrial strength like nix. This is because I'm still a casual Haskeller, using Haskell to experiment and learn, and because it's the most fun language that I've ever used.

Some tips for using `stack`

### Fast builds

You can skip GHC optimization with

```bash
$ stack build --fast
```

If you're running tests (I'm still bad at this), then know that running test implies a build, so you can add the fast flag. The following two are equivilant.

```bash
$ stack build --fast --test
$ stack test --fast
```

### Documentation

It is useful to build documentation as well as code. You can do this with the haddock flag. Note that this can take a long time to run. Open option is to only build docs for dependencies, which prevents having to re-run haddock every time you build.

```bash
$ stack test --fast --haddock-deps
```

### Watching for Changes

You can either use `ghcid`, or run a more robust build that's watching for changes with

```bash
$ stack test --fast --haddock-deps --file-watch
```
{-# START_FILE brittany.yaml #-}
conf_forward:
  options_ghc:
    # trivial
    - -XEmptyCase
    - -XFlexibleContexts
    - -XFlexibleInstances
    - -XInstanceSigs
    - -XMultiParamTypeClasses
    # only activated once used
    - -XLambdaCase
    - -XMultiWayIf
    - -XNamedFieldPuns
    - -XTupleSections
    # no cost deriving power
    - -XDeriveFoldable
    - -XDeriveFunctor
    - -XDeriveGeneric
    - -XDeriveLift
    - -XDeriveTraversable
    - -XDerivingStrategies
    - -XGeneralizedNewtypeDeriving
    - -XStandaloneDeriving
    # used everywhere anyway
    - -XOverloadedStrings
    # ehh syntax
    - -XTypeApplications

{-# START_FILE .stylish-haskell.yaml #-}
# stylish-haskell configuration file
# ==================================

# The stylish-haskell tool is mainly configured by specifying steps. These steps
# are a list, so they have an order, and one specific step may appear more than
# once (if needed). Each file is processed by these steps in the given order.
steps:
  # Convert some ASCII sequences to their Unicode equivalents. This is disabled
  # by default.
  # - unicode_syntax:
  #     # In order to make this work, we also need to insert the UnicodeSyntax
  #     # language pragma. If this flag is set to true, we insert it when it's
  #     # not already present. You may want to disable it if you configure
  #     # language extensions using some other method than pragmas. Default:
  #     # true.
  #     add_language_pragma: true

  # Align the right hand side of some elements.  This is quite conservative
  # and only applies to statements where each element occupies a single
  # line.
  - simple_align:
      cases: true
      top_level_patterns: true
      records: true

  # Import cleanup
  - imports:
      # There are different ways we can align names and lists.
      #
      # - global: Align the import names and import list throughout the entire
      #   file.
      #
      # - file: Like global, but don't add padding when there are no qualified
      #   imports in the file.
      #
      # - group: Only align the imports per group (a group is formed by adjacent
      #   import lines).
      #
      # - none: Do not perform any alignment.
      #
      # Default: global.
      align: global

      # The following options affect only import list alignment.
      #
      # List align has following options:
      #
      # - after_alias: Import list is aligned with end of import including
      #   'as' and 'hiding' keywords.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                          init, last, length)
      #
      # - with_alias: Import list is aligned with start of alias or hiding.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                 init, last, length)
      #
      # - new_line: Import list starts always on new line.
      #
      #   > import qualified Data.List      as List
      #   >     (concat, foldl, foldr, head, init, last, length)
      #
      # Default: after_alias
      list_align: after_alias

      # Right-pad the module names to align imports in a group:
      #
      # - true: a little more readable
      #
      #   > import qualified Data.List       as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # - false: diff-safe
      #
      #   > import qualified Data.List as List (concat, foldl, foldr, init,
      #   >                                     last, length)
      #   > import qualified Data.List.Extra as List (concat, foldl, foldr,
      #   >                                           init, last, length)
      #
      # Default: true
      pad_module_names: true

      # Long list align style takes effect when import is too long. This is
      # determined by 'columns' setting.
      #
      # - inline: This option will put as much specs on same line as possible.
      #
      # - new_line: Import list will start on new line.
      #
      # - new_line_multiline: Import list will start on new line when it's
      #   short enough to fit to single line. Otherwise it'll be multiline.
      #
      # - multiline: One line per import list entry.
      #   Type with constructor list acts like single import.
      #
      #   > import qualified Data.Map as M
      #   >     ( empty
      #   >     , singleton
      #   >     , ...
      #   >     , delete
      #   >     )
      #
      # Default: inline
      long_list_align: inline

      # Align empty list (importing instances)
      #
      # Empty list align has following options
      #
      # - inherit: inherit list_align setting
      #
      # - right_after: () is right after the module name:
      #
      #   > import Vector.Instances ()
      #
      # Default: inherit
      empty_list_align: inherit

      # List padding determines indentation of import list on lines after import.
      # This option affects 'long_list_align'.
      #
      # - <integer>: constant value
      #
      # - module_name: align under start of module name.
      #   Useful for 'file' and 'group' align settings.
      list_padding: 4

      # Separate lists option affects formatting of import list for type
      # or class. The only difference is single space between type and list
      # of constructors, selectors and class functions.
      #
      # - true: There is single space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable (fold, foldl, foldMap))
      #
      # - false: There is no space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable(fold, foldl, foldMap))
      #
      # Default: true
      separate_lists: true

      # Space surround option affects formatting of import lists on a single
      # line. The only difference is single space after the initial
      # parenthesis and a single space before the terminal parenthesis.
      #
      # - true: There is single space associated with the enclosing
      #   parenthesis.
      #
      #   > import Data.Foo ( foo )
      #
      # - false: There is no space associated with the enclosing parenthesis
      #
      #   > import Data.Foo (foo)
      #
      # Default: false
      space_surround: false

  # Language pragmas
  - language_pragmas:
      # We can generate different styles of language pragma lists.
      #
      # - vertical: Vertical-spaced language pragmas, one per line.
      #
      # - compact: A more compact style.
      #
      # - compact_line: Similar to compact, but wrap each line with
      #   `{-#LANGUAGE #-}'.
      #
      # Default: vertical.
      style: vertical

      # Align affects alignment of closing pragma brackets.
      #
      # - true: Brackets are aligned in same column.
      #
      # - false: Brackets are not aligned together. There is only one space
      #   between actual import and closing bracket.
      #
      # Default: true
      align: true

      # stylish-haskell can detect redundancy of some language pragmas. If this
      # is set to true, it will remove those redundant pragmas. Default: true.
      remove_redundant: true

  # Replace tabs by spaces. This is disabled by default.
  # - tabs:
  #     # Number of spaces to use for each tab. Default: 8, as specified by the
  #     # Haskell report.
  #     spaces: 8

  # Remove trailing whitespace
  - trailing_whitespace: {}

  # Squash multiple spaces between the left and right hand sides of some
  # elements into single spaces. Basically, this undoes the effect of
  # simple_align but is a bit less conservative.
  # - squash: {}

# A common setting is the number of columns (parts of) code will be wrapped
# to. Different steps take this into account. Default: 80.
columns: 80

# By default, line endings are converted according to the OS. You can override
# preferred format here.
#
# - native: Native newline format. CRLF on Windows, LF on other OSes.
#
# - lf: Convert to LF ("\n").
#
# - crlf: Convert to CRLF ("\r\n").
#
# Default: native.
newline: native

# Sometimes, language extensions are specified in a cabal file or from the
# command line instead of using language pragmas in the file. stylish-haskell
# needs to be aware of these, so it can parse the file correctly.
#
# No language extensions are enabled by default.
# language_extensions:
  # - TemplateHaskell
  # - QuasiQuotes
language_extensions:
  # trivial
  - EmptyCase
  - FlexibleContexts
  - FlexibleInstances
  - InstanceSigs
  - MultiParamTypeClasses
  # only activated once used
  - LambdaCase
  - MultiWayIf
  - NamedFieldPuns
  - TupleSections
  # no cost deriving power
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveLift
  - DeriveTraversable
  - DerivingStrategies
  - GeneralizedNewtypeDeriving
  - StandaloneDeriving
  # used everywhere anyway
  - OverloadedStrings
  # ehh syntax
  - TypeApplications

{-# START_FILE .hlint.yaml #-}
# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
- ignore: {name: Use camelCase}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2022{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
